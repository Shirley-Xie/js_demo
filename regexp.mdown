regular express

- \^表示行的开头，^\d表示必须以数字开头。  
- $表示行的结束，\d$表示必须以数字结束。


### 单个匹配
1. \d = 1 number(数字)
2. \w = 1 letter(字母)|| 1 number
3.  . = 1 character(字符)   --'js.'可以匹配'jsp'、'jss'、'js!'
4.  ? = 0 ||1 character
5. \s = 1 blank 空格(Tab) ' '，'\t\t'等
6. A|B可以匹配A或B

### 多个匹配
1. \* \> = 0 character
2. \+ \> = 1 character
3. {n} = n character，{n,m} = n-m character  
  -- 010  12345 : \d{3}\s+\d{3,8} 
  -- 010-12345 : \d{3}\-\d{3,8}由于'-'是特殊字符，在正则表达式中，要用'\'转义

### []范围  任意组合
[a-zA-Z\_\$][0-9a-zA-Z\_\$]{0, 19} 更精确地限制了变量的长度是1-20个字符
'010 - 12345'

---
### 2种写法
```
var re1 = /ABC\-001/; --re1; // /ABC\-001/   
var re2 = new RegExp('ABC\\-001'); //re2; /ABC\-001/
```
---
### 判断正则表达式是否匹配：
```
var re = /^\d{3}\-\d{3,8}$/;
re.test('010-1234x'); // false
```
---
### 切分字符串
```
'a b   c'.split(' '); // ['a', 'b', '', '', 'c'] //无法识别连续的空格
'a b   c'.split(/\s+/); // ['a', 'b', 'c']//正则
'a,b;; c  d'.split(/[\s\,\;]+/); // ['a', 'b', 'c', 'd']
```
### 分组:提取子串用()
```
var re = /^(\d{3})-(\d{3,8})$/;
re.exec('010-12345'); // ['010-12345', '010', '12345']
re.exec('010 12345'); // null   exec()方法在匹配失败时返回null
```
###程序配合识别
####贪婪匹配  
正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符
```
var re = /^(\d+)(0*)$/; //贪婪匹配
re.exec('102300'); // ['102300', '102300', '']

var re = /^(\d+?)(0*)$/; //非贪婪匹配?
re.exec('102300'); // ['102300', '1023', '00']

```
####全局搜索
```
//g表示全局匹配：
var r1 = /test/g;
// 等价于:
var r2 = new RegExp('test', 'g');

var s = 'JavaScript, VBScript, JScript and ECMAScript';
var re=/[a-zA-Z]+Script/g;

// 使用全局匹配:
re.exec(s); // ['JavaScript']
re.lastIndex; // 10
......
re.exec(s); // ['ECMAScript']
re.lastIndex; // 44
re.exec(s); // null，直到结束仍没有匹配到
//正则表达式还可以指定i标志，表示忽略大小写，m标志，表示执行多行匹配

```
